{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/edge.js","webpack:///./lib/edge_overlapping.js","webpack:///./lib/game.js","webpack:///./lib/game_view.js","webpack:///./lib/level.js","webpack:///./lib/line-weaver.js","webpack:///./lib/util/constants.js","webpack:///./lib/util/stats.js","webpack:///./lib/vertex.js","webpack:///./lib/vertex_empty.js","webpack:///./lib/vertex_full.js","webpack:///./lib/vertex_temp.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA,kBAAkB,mBAAO,CAAC,iDAAkB;;AAE5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/BA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,kBAAkB,mBAAO,CAAC,iDAAkB;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjDA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,eAAe,mBAAO,CAAC,iCAAU;AACjC,iBAAiB,mBAAO,CAAC,uCAAa;AACtC,cAAc,mBAAO,CAAC,+BAAS;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,yCAAyC;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD,WAAW;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACvMA,mBAAmB,mBAAO,CAAC,2CAAe;AAC1C,oBAAoB,mBAAO,CAAC,6CAAgB;AAC5C,mBAAmB,mBAAO,CAAC,2CAAe;AAC1C,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,wBAAwB,mBAAO,CAAC,qDAAoB;AACpD,cAAc,mBAAO,CAAC,yCAAc;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,YAAY;AAChC,sBAAsB,aAAa;AACnC;AACA,uCAAuC,sBAAsB;AAC7D;AACA,SAAS;AACT,wCAAwC,sBAAsB;AAC9D;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,oBAAoB,UAAU;AAC9B,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/VA,cAAc,mBAAO,CAAC,yCAAc;AACpC,kBAAkB,mBAAO,CAAC,iDAAkB;;AAE5C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,YAAY;AAChC,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACvDA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,iBAAiB,mBAAO,CAAC,uCAAa;AACtC,cAAc,mBAAO,CAAC,+BAAS;;AAE/B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;;;;;;;;;;;;ACjBD;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrNA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChBA,eAAe,mBAAO,CAAC,iCAAU;AACjC,kBAAkB,mBAAO,CAAC,iDAAkB;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpBA,eAAe,mBAAO,CAAC,iCAAU;AACjC,kBAAkB,mBAAO,CAAC,iDAAkB;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC5BA,eAAe,mBAAO,CAAC,iCAAU;;AAEjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/line-weaver.js\");\n","const Constants = require('./util/constants');\n\nclass Edge {\n  constructor(options) {\n    this.vertex1 = options.vertex1;\n    this.vertex2 = options.vertex2;\n    this.ctx = options.ctx;\n  }\n\n  draw() {\n    this.ctx.strokeStyle = Constants.VALID_EDGE_YELLOW;\n    this.ctx.shadowColor = Constants.VALID_EDGE_YELLOW;\n    this.ctx.lineWidth = 12;\n    this.ctx.shadowBlur = 5;\n    this.ctx.globalAlpha = 0.5;\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.vertex1.x, this.vertex1.y);\n    this.ctx.lineTo(this.vertex2.x, this.vertex2.y);\n    this.ctx.stroke();\n  }\n\n  equalYes(edge) {\n    return (\n      (this.vertex1.equalYes(edge.vertex1) &&\n        this.vertex2.equalYes(edge.vertex2)) ||\n      (this.vertex2.equalYes(edge.vertex1) &&\n        this.vertex1.equalYes(edge.vertex2))\n    );\n  }\n}\n\nmodule.exports = Edge;\n","const Edge = require('./edge');\nconst Constants = require('./util/constants');\n\nclass EdgeOverlapping extends Edge {\n  constructor(options) {\n    super(options);\n  }\n\n  draw() {\n    this.ctx.strokeStyle = Constants.OVERLAPPING_EDGE_RED;\n    this.ctx.shadowColor = Constants.OVERLAPPING_EDGE_RED;\n    this.ctx.lineWidth = 12;\n    this.ctx.shadowBlur = 5;\n    this.ctx.globalAlpha = 0.5;\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.vertex1.x, this.vertex1.y);\n    this.ctx.lineTo(this.vertex2.x, this.vertex2.y);\n    this.ctx.stroke();\n\n    this.drawX();\n  }\n\n  drawX() {\n    this.ctx.beginPath();\n\n    this.ctx.moveTo(\n      (this.vertex1.x + this.vertex2.x) / 2 - 15,\n      (this.vertex1.y + this.vertex2.y) / 2 - 15\n    );\n    this.ctx.lineTo(\n      (this.vertex1.x + this.vertex2.x) / 2 + 15,\n      (this.vertex1.y + this.vertex2.y) / 2 + 15\n    );\n\n    this.ctx.moveTo(\n      (this.vertex1.x + this.vertex2.x) / 2 + 15,\n      (this.vertex1.y + this.vertex2.y) / 2 - 15\n    );\n    this.ctx.lineTo(\n      (this.vertex1.x + this.vertex2.x) / 2 - 15,\n      (this.vertex1.y + this.vertex2.y) / 2 + 15\n    );\n    this.ctx.lineWidth = 7;\n    this.ctx.strokeStyle = 'white';\n\n    this.ctx.stroke();\n  }\n}\n\nmodule.exports = EdgeOverlapping;\n","const Edge = require('./edge');\nconst Vertex = require('./vertex');\nconst GameView = require('./game_view');\nconst Level = require('./level');\n\nclass Game {\n  constructor(gameCtx, levelCtx) {\n    this.stage = 1;\n    this.gameCtx = gameCtx;\n    this.levelCtx = levelCtx;\n    this.stageClearBind = this.handleStageClear.bind(this);\n    this.buildGraph();\n    this.enableUndoLastMove();\n    this.enableNextLevel();\n    this.enableCheckWinning();\n  }\n\n  levelCleared() {\n    let playerEdges = [];\n    for (let i = 0; i < this.gameView.fullVertex.length - 1; i++) {\n      const startVertex = this.gameView.fullVertex[i];\n      const endVertex = this.gameView.fullVertex[i + 1];\n      const x0 = (startVertex.x - 45) / 90;\n      const y0 = (startVertex.y - 45) / 90;\n      const x1 = (endVertex.x - 45) / 90;\n      const y1 = (endVertex.y - 45) / 90;\n\n      playerEdges = playerEdges.concat(this.calculateEdges(x0, y0, x1, y1));\n    }\n\n    let computerEdges = [];\n    for (let i = 0; i < this.level.goal.length; i++) {\n      const x0 = this.level.goal[i][0][0];\n      const y0 = this.level.goal[i][0][1];\n      const x1 = this.level.goal[i][1][0];\n      const y1 = this.level.goal[i][1][1];\n\n      computerEdges = computerEdges.concat(this.calculateEdges(x0, y0, x1, y1));\n    }\n\n    if (playerEdges.length != computerEdges.length) {\n      return;\n    }\n\n    for (let i = 0; i < computerEdges.length; i++) {\n      let found = playerEdges.reduce(\n        (acc, ele) => acc || ele.equalYes(computerEdges[i]),\n        false\n      );\n      if (!found) {\n        return;\n      }\n    }\n\n    this.renderModal();\n  }\n\n  calculateEdges(x0, y0, x1, y1) {\n    const result = [];\n\n    const dx = x1 - x0;\n    const dy = y1 - y0;\n    for (let j = 4; j >= 1; j--) {\n      if (dx % j == 0 && dy % j == 0) {\n        for (let k = 0; k < j; k++) {\n          result.push(\n            new Edge({\n              vertex1: new Vertex({\n                x: x0 + k * (dx / j),\n                y: y0 + k * (dy / j)\n              }),\n              vertex2: new Vertex({\n                x: x0 + (k + 1) * (dx / j),\n                y: y0 + (k + 1) * (dy / j)\n              })\n            })\n          );\n        }\n        return result;\n      }\n    }\n  }\n\n  // helper\n\n  renderModal() {\n    const messageUl = document.getElementById('message');\n    messageUl.className = '';\n    const li1 = document.createElement('li');\n    const li2 = document.createElement('li');\n\n    if (this.stage < 12) {\n      li1.appendChild(document.createTextNode(`Level ${this.stage} cleared!`));\n      li2.appendChild(document.createTextNode('NEXT'));\n      messageUl.appendChild(li1);\n      messageUl.appendChild(li2);\n\n      li2.addEventListener('click', e => {\n        this.handleStageClear();\n        setTimeout(() => {\n          messageUl.className = 'display-none';\n          messageUl.removeChild(li1);\n          messageUl.removeChild(li2);\n        }, 200);\n      });\n    } else {\n      li1.appendChild(\n        document.createTextNode(\"Congradulations! You've cleared all levels!\")\n      );\n      li2.appendChild(document.createTextNode('PLAY AGAIN'));\n      messageUl.appendChild(li1);\n      messageUl.appendChild(li2);\n      li2.addEventListener('click', e => {\n        this.handleResetGame();\n        setTimeout(() => {\n          messageUl.className = 'display-none';\n          messageUl.removeChild(li1);\n          messageUl.removeChild(li2);\n          this.enableNextLevel();\n        }, 200);\n      });\n    }\n  }\n\n  handleStageClear() {\n    this.stage += 1;\n\n    if (this.stage === 12) {\n      const nextLevel = document.getElementById('next-level');\n      nextLevel.removeEventListener('click', this.stageClearBind);\n      this.renderModal();\n    }\n\n    this.gameView.ctx.clearRect(0, 0, 450, 450);\n    this.level.ctx.clearRect(0, 0, 216, 216);\n    this.buildGraph();\n  }\n\n  handleResetGame() {\n    this.stage = 1;\n    this.gameView.ctx.clearRect(0, 0, 450, 450);\n    this.level.ctx.clearRect(0, 0, 216, 216);\n    this.buildGraph();\n  }\n\n  buildGraph() {\n    this.gameView = new GameView(this.gameCtx, this.stage);\n    this.level = new Level(this.levelCtx, this.stage);\n  }\n\n  enableUndoLastMove() {\n    const undo = document.getElementById('undo');\n    undo.addEventListener('click', this.handleUndo.bind(this));\n  }\n\n  enableRestart() {\n    const restart = document.getElementById('restart');\n    restart.addEventListener('click', this.handleRestart.bind(this));\n  }\n\n  enableNextLevel() {\n    const nextLevel = document.getElementById('next-level');\n    nextLevel.addEventListener('click', this.stageClearBind);\n  }\n\n  enableCheckWinning() {\n    const gameCanvas = document.getElementById('game-canvas');\n    gameCanvas.addEventListener('mouseup', e =>\n      setTimeout(this.levelCleared.bind(this), 250)\n    );\n  }\n\n  handleUndo() {\n    if (this.gameView.moveOrder.length > 0) {\n      this.gameView.fullVertex = this.gameView.fullVertex\n        .slice(\n          0,\n          this.gameView.moveOrder[this.gameView.moveOrder.length - 1] + 1\n        )\n        .concat(\n          this.gameView.fullVertex.slice(\n            this.gameView.moveOrder[this.gameView.moveOrder.length - 1] + 2\n          )\n        );\n      this.gameView.moveOrder.pop();\n      this.gameView.ctx.clearRect(0, 0, 450, 450);\n      this.gameView.drawVertex();\n      this.gameView.drawlines();\n    }\n  }\n\n  handleRestart() {\n    this.gameView.fullVertex = this.gameView.initializeStartingVertex();\n    this.gameView.ctx.clearRect(0, 0, 450, 450);\n    this.gameView.drawVertex();\n    this.gameView.drawlines();\n  }\n}\n\nmodule.exports = Game;\n","const VertexFull = require('./vertex_full');\nconst VertexEmpty = require('./vertex_empty');\nconst VertexTemp = require('./vertex_temp');\nconst Edge = require('./edge');\nconst EdgeOverlapping = require('./edge_overlapping');\nconst Stats = require('./util/stats');\n\nclass GameView {\n  constructor(ctx, stage) {\n    this.ctx = ctx;\n    this.stage = stage;\n    this.startingVertexPos = this.calculateStartPos();\n    this.fullVertex = this.initializeStartingVertex();\n    this.allVertexPos = this.populateVertex();\n    this.moveOrder = [];\n    this.selected;\n    this.index;\n\n    this.drawVertex();\n    this.drawlines();\n    this.handleClick();\n\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n  }\n\n  // Event listeners\n\n  handleClick() {\n    const gameCanvas = document.getElementById('game-canvas');\n\n    gameCanvas.addEventListener('mousedown', e => {\n      this.selected = this.selectedEdge(e.offsetX, e.offsetY);\n\n      if (this.selected) {\n        const newVertex = new VertexTemp({\n          x: e.offsetX,\n          y: e.offsetY,\n          ctx: this.ctx\n        });\n        newVertex.draw();\n\n        gameCanvas.addEventListener('mousemove', this.handleMouseMove);\n        gameCanvas.addEventListener('mouseup', this.handleMouseUp);\n      }\n    });\n  }\n\n  handleMouseUp(e) {\n    const gameCanvas = document.getElementById('game-canvas');\n\n    for (let i = 0; i < this.allVertexPos.length; i++) {\n      let pos = this.allVertexPos[i];\n      if (\n        pos[0] <= e.offsetX + 20 &&\n        pos[0] >= e.offsetX - 20 &&\n        pos[1] <= e.offsetY + 20 &&\n        pos[1] >= e.offsetY - 20\n      ) {\n        const newVertex = new VertexFull({\n          x: pos[0],\n          y: pos[1],\n          ctx: this.ctx\n        });\n\n        const prevVertex = this.fullVertex[this.index];\n        const nextVertex = this.fullVertex[this.index + 1];\n\n        if (\n          this.hasConflicts(prevVertex, newVertex) ||\n          this.hasConflicts(nextVertex, newVertex) ||\n          this.selfConflicting(this.selected[0], newVertex, this.selected[1])\n        ) {\n          break;\n        } else {\n          this.fullVertex = this.fullVertex\n            .slice(0, this.index + 1)\n            .concat([newVertex])\n            .concat(this.fullVertex.slice(this.index + 1));\n\n          this.moveOrder.push(this.index);\n          break;\n        }\n      }\n    }\n\n    this.index = undefined;\n\n    this.ctx.clearRect(0, 0, 500, 500);\n    this.drawVertex();\n    this.drawlines();\n\n    gameCanvas.removeEventListener('mousemove', this.handleMouseMove);\n    gameCanvas.removeEventListener('mouseup', this.handleMouseUp);\n  }\n\n  handleMouseMove(e) {\n    const newVertex = new VertexTemp({\n      x: e.offsetX,\n      y: e.offsetY,\n      ctx: this.ctx\n    });\n\n    let edge1, edge2;\n\n    if (\n      this.hasConflicts(this.selected[0], newVertex) ||\n      this.selfConflicting(this.selected[0], newVertex, this.selected[1])\n    ) {\n      edge1 = new EdgeOverlapping({\n        ctx: this.ctx,\n        vertex1: this.selected[0],\n        vertex2: newVertex\n      });\n    } else {\n      edge1 = new Edge({\n        ctx: this.ctx,\n        vertex1: this.selected[0],\n        vertex2: newVertex\n      });\n    }\n\n    if (\n      this.hasConflicts(this.selected[1], newVertex) ||\n      this.selfConflicting(this.selected[0], newVertex, this.selected[1])\n    ) {\n      edge2 = new EdgeOverlapping({\n        ctx: this.ctx,\n        vertex1: this.selected[1],\n        vertex2: newVertex\n      });\n    } else {\n      edge2 = new Edge({\n        ctx: this.ctx,\n        vertex1: newVertex,\n        vertex2: this.selected[1]\n      });\n    }\n    this.ctx.clearRect(0, 0, 450, 450);\n\n    this.drawVertex();\n    this.drawlines();\n    newVertex.draw();\n    edge1.draw();\n    edge2.draw();\n  }\n\n  // helpers\n\n  hasConflicts(edgeVertex1, edgeVertex2) {\n    const result = [];\n    for (let i = 0; i < this.fullVertex.length - 1; i++) {\n      if (i === this.index) continue;\n      const boardVertex1 = this.fullVertex[i];\n      const boardVertex2 = this.fullVertex[i + 1];\n\n      const vertexArray = [\n        edgeVertex1,\n        boardVertex1,\n        edgeVertex2,\n        boardVertex2\n      ];\n      const crossProduct = [];\n\n      for (let i = 0; i < 4; i++) {\n        const vertex1 = vertexArray[i];\n        const vertex2 = vertexArray[(i + 1) % 4];\n        const vertex3 = vertexArray[(i + 2) % 4];\n\n        crossProduct.push(\n          (vertex3.x - vertex1.x) * (vertex3.y - vertex2.y) -\n            (vertex3.x - vertex2.x) * (vertex3.y - vertex1.y)\n        );\n      }\n\n      if (\n        crossProduct.every(value => value > 0) ||\n        crossProduct.every(value => value < 0)\n      ) {\n        result.push(true);\n      } else if (crossProduct.every(value => value === 0)) {\n        return (\n          this.isSameEdge(\n            edgeVertex1,\n            edgeVertex2,\n            boardVertex1,\n            boardVertex2\n          ) ||\n          (this.isVertexOnEdge(edgeVertex1, edgeVertex2, boardVertex1) ||\n            this.isVertexOnEdge(edgeVertex1, edgeVertex2, boardVertex2) ||\n            this.isVertexOnEdge(boardVertex1, boardVertex2, edgeVertex1) ||\n            this.isVertexOnEdge(boardVertex1, boardVertex2, edgeVertex2))\n        );\n      } else {\n        result.push(false);\n      }\n    }\n    return result.some(bool => bool === true);\n  }\n\n  selfConflicting(prevVertex, newVertex, nextVertex) {\n    const isEdgeConflicting1 = this.isVertexOnEdge(\n      prevVertex,\n      newVertex,\n      nextVertex\n    );\n    const isEdgeConflicting2 = this.isVertexOnEdge(\n      nextVertex,\n      newVertex,\n      prevVertex\n    );\n\n    return isEdgeConflicting1 || isEdgeConflicting2;\n  }\n\n  isVertexOnEdge(edgeVertex1, edgeVertex2, vertex) {\n    const x = vertex.x;\n    const y = vertex.y;\n\n    const maxX = edgeVertex1.x > edgeVertex2.x ? edgeVertex1.x : edgeVertex2.x;\n    const minX = edgeVertex1.x < edgeVertex2.x ? edgeVertex1.x : edgeVertex2.x;\n    const maxY = edgeVertex1.y > edgeVertex2.y ? edgeVertex1.y : edgeVertex2.y;\n    const minY = edgeVertex1.y < edgeVertex2.y ? edgeVertex1.y : edgeVertex2.y;\n\n    return (\n      (x - edgeVertex1.x) * (y - edgeVertex2.y) -\n        (x - edgeVertex2.x) * (y - edgeVertex1.y) >=\n        -5000 &&\n      (x - edgeVertex1.x) * (y - edgeVertex2.y) -\n        (x - edgeVertex2.x) * (y - edgeVertex1.y) <=\n        5000 &&\n      ((x < maxX && x > minX) || (y < maxY && y > minY))\n    );\n  }\n\n  isVertexExactlyOnEdge(edgeVertex1, edgeVertex2, vertex) {\n    const x = vertex.x;\n    const y = vertex.y;\n\n    return (\n      (x - edgeVertex1.x) * (y - edgeVertex2.y) ==\n      (x - edgeVertex2.x) * (y - edgeVertex1.y)\n    );\n  }\n\n  selectedEdge(x, y) {\n    for (let i = 0; i < this.fullVertex.length; i++) {\n      if (i === this.fullVertex.length - 1) continue;\n      const vertex1 = this.fullVertex[i];\n      const vertex2 = this.fullVertex[i + 1];\n\n      const maxX = vertex1.x > vertex2.x ? vertex1.x : vertex2.x;\n      const minX = vertex1.x < vertex2.x ? vertex1.x : vertex2.x;\n      const maxY = vertex1.y > vertex2.y ? vertex1.y : vertex2.y;\n      const minY = vertex1.y < vertex2.y ? vertex1.y : vertex2.y;\n\n      if (\n        (x - vertex1.x) * (y - vertex2.y) - (x - vertex2.x) * (y - vertex1.y) >=\n          -2000 &&\n        (x - vertex1.x) * (y - vertex2.y) - (x - vertex2.x) * (y - vertex1.y) <=\n          2000 &&\n        ((x < maxX && x > minX) || (y < maxY && y > minY))\n      ) {\n        this.index = i;\n        return [vertex1, vertex2];\n      }\n    }\n  }\n\n  isSameEdge(edgeVertex1, edgeVertex2, boardVertex1, boardVertex2) {\n    (this.isSamePos(edgeVertex1, boardVertex1) &&\n      this.isSamePos(edgeVertex2, boardVertex2)) ||\n      (this.isSamePos(edgeVertex1, boardVertex2) &&\n        this.isSamePos(edgeVertex2, boardVertex1));\n  }\n\n  isSamePos(vertex1, vertex2) {\n    return vertex1.x === vertex2.x && vertex1.y === vertex2.y;\n  }\n\n  // Drawing related\n\n  drawVertex() {\n    const width = 450;\n    const height = 450;\n    this.ctx.lineWidth = 4;\n\n    for (let x = 45; x <= width; x += 90) {\n      for (let y = 45; y <= height; y += 90) {\n        if (this.isStartingVertexPos(x, y)) {\n          let vertex = new VertexFull({ ctx: this.ctx, x, y });\n          vertex.draw();\n        } else {\n          let vertex = new VertexEmpty({ ctx: this.ctx, x, y });\n          vertex.draw();\n        }\n      }\n    }\n  }\n\n  drawlines() {\n    for (let i = 0; i < this.fullVertex.length; i++) {\n      if (i === this.fullVertex.length - 1) continue;\n      if (i === this.index) continue;\n      let vertex1 = this.fullVertex[i];\n      let vertex2 = this.fullVertex[i + 1];\n\n      let edge = new Edge({\n        vertex1,\n        vertex2,\n        ctx: this.ctx\n      });\n\n      edge.draw();\n    }\n  }\n\n  isStartingVertexPos(x, y) {\n    for (let i = 0; i < this.fullVertex.length; i++) {\n      let currentVertex = this.fullVertex[i];\n      if (x === currentVertex.x && y === currentVertex.y) return true;\n    }\n    return false;\n  }\n\n  initializeStartingVertex() {\n    return this.startingVertexPos.map(\n      pos =>\n        new VertexFull({\n          x: pos[0],\n          y: pos[1],\n          ctx: this.ctx\n        })\n    );\n  }\n\n  populateVertex() {\n    const result = [];\n    for (let x = 45; x <= 450; x += 90) {\n      for (let y = 45; y <= 450; y += 90) {\n        result.push([x, y]);\n      }\n    }\n    return result;\n  }\n\n  calculateStartPos() {\n    return Stats.game[this.stage].map(el => el.map(num => 45 + num * 90));\n  }\n}\n\nmodule.exports = GameView;\n","const Stats = require('./util/stats');\nconst Constants = require('./util/constants');\n\nclass Level {\n  constructor(ctx, stage) {\n    this.ctx = ctx;\n    this.stage = stage;\n    this.goal = Stats.goal[this.stage];\n\n    this.draw();\n  }\n\n  draw() {\n    this.drawVertex();\n    for (let i = 0; i < this.goal.length; i++) {\n      const vertexPos1 = this.goal[i][0];\n      const vertexPos2 = this.goal[i][1];\n      this.drawEdge([vertexPos1, vertexPos2]);\n    }\n  }\n\n  drawVertex() {\n    const width = 216;\n    const height = 216;\n    this.ctx.lineWidth = 3.5;\n\n    for (let x = 30; x <= width; x += 42) {\n      for (let y = 30; y <= height; y += 42) {\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = 'lightgrey';\n        this.ctx.fillStyle = 'lightgrey';\n        this.ctx.shadowBlur = 0;\n        this.ctx.globalAlpha = 1;\n        this.ctx.arc(x, y, 6, 0, 2 * Math.PI);\n        this.ctx.fill();\n        this.ctx.stroke();\n      }\n    }\n  }\n\n  drawEdge(vertexes) {\n    vertexes = vertexes.map(el => el.map(num => 30 + num * 42));\n\n    this.ctx.strokeStyle = Constants.VERTEX_PINK;\n    this.ctx.shadowColor = Constants.VERTEX_PINK;\n    this.ctx.lineWidth = 9;\n    this.ctx.shadowBlur = 10;\n    this.ctx.globalAlpha = 0.4;\n    this.ctx.beginPath();\n    this.ctx.moveTo(vertexes[0][0], vertexes[0][1]);\n    this.ctx.lineTo(vertexes[1][0], vertexes[1][1]);\n    this.ctx.stroke();\n  }\n}\n\nmodule.exports = Level;\n","const Game = require('./game');\nconst GameView = require('./game_view');\nconst Level = require('./level');\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const gameCanvas = document.getElementById('game-canvas');\n  gameCanvas.width = 450;\n  gameCanvas.height = 450;\n\n  const levelCanvas = document.getElementById('level-canvas');\n  levelCanvas.width = 230;\n  levelCanvas.height = 230;\n\n  const gameCtx = gameCanvas.getContext('2d');\n  const levelCtx = levelCanvas.getContext('2d');\n\n  const game = new Game(gameCtx, levelCtx);\n});\n","module.exports = {\n  VERTEX_PINK: '#F37A90',\n  OVERLAPPING_EDGE_RED: '#FF0000',\n  VALID_EDGE_YELLOW: '#e4cd00'\n};\n","module.exports = {\n  game: {\n    1: [[1, 3], [3, 3]],\n    2: [[1, 2], [2, 1], [3, 2], [1, 2], [2, 3], [3, 2]],\n    3: [[2, 2], [1, 0], [3, 0], [2, 2], [1, 4], [3, 4], [2, 2]],\n    4: [[1, 1], [3, 1], [3, 3], [1, 3], [1, 1]],\n    5: [[1, 1], [3, 1], [3, 3], [1, 3], [1, 1]],\n    6: [[1, 2], [1, 1], [2, 1], [2, 3], [3, 3], [3, 2]],\n    7: [[1, 1], [2, 1], [2, 2], [3, 2], [3, 3], [2, 3], [2, 2], [1, 2], [1, 1]],\n    8: [[2, 1], [1, 3], [3, 3], [2, 1]],\n    9: [[1, 2], [3, 2]],\n    10: [[0, 0], [4, 0], [4, 4], [0, 4], [0, 0]],\n    11: [[2, 1], [3, 3], [1, 3], [2, 1]],\n    12: [[1, 2], [3, 2]]\n  },\n  goal: {\n    1: [\n      [[1, 3], [1, 2]],\n      [[1, 2], [1, 1]],\n      [[1, 1], [2, 3]],\n      [[2, 3], [3, 1]],\n      [[3, 1], [3, 2]],\n      [[3, 2], [3, 3]]\n    ],\n    2: [\n      [[1, 2], [0, 1]],\n      [[0, 1], [1, 1]],\n      [[1, 1], [2, 1]],\n      [[2, 1], [3, 1]],\n      [[3, 1], [4, 1]],\n      [[4, 1], [3, 2]],\n      [[3, 2], [2, 3]],\n      [[2, 3], [1, 2]],\n      [[1, 2], [2, 2]],\n      [[2, 2], [3, 2]]\n    ],\n    3: [\n      [[2, 2], [1, 2]],\n      [[1, 2], [0, 2]],\n      [[0, 2], [1, 0]],\n      [[1, 0], [2, 0]],\n      [[2, 0], [3, 0]],\n      [[3, 0], [4, 2]],\n      [[4, 2], [3, 2]],\n      [[3, 2], [2, 2]],\n      [[2, 2], [3, 4]],\n      [[3, 4], [2, 3]],\n      [[2, 3], [1, 4]],\n      [[1, 4], [2, 2]]\n    ],\n    4: [\n      [[1, 1], [1, 0]],\n      [[1, 0], [2, 0]],\n      [[2, 0], [3, 0]],\n      [[3, 0], [3, 1]],\n      [[3, 1], [3, 2]],\n      [[3, 2], [2, 2]],\n      [[2, 2], [1, 2]],\n      [[1, 2], [1, 1]],\n      [[2, 2], [4, 3]],\n      [[4, 3], [3, 3]],\n      [[3, 3], [3, 4]],\n      [[3, 4], [2, 4]],\n      [[2, 4], [1, 4]],\n      [[1, 4], [1, 3]],\n      [[1, 3], [0, 3]],\n      [[0, 3], [2, 2]]\n    ],\n    5: [\n      [[1, 1], [0, 2]],\n      [[0, 2], [1, 3]],\n      [[1, 3], [2, 2]],\n      [[2, 2], [3, 3]],\n      [[3, 3], [4, 2]],\n      [[4, 2], [3, 1]],\n      [[3, 1], [2, 2]],\n      [[2, 2], [1, 1]]\n    ],\n    6: [\n      [[1, 2], [1, 1]],\n      [[1, 1], [2, 1]],\n      [[2, 1], [3, 2]],\n      [[3, 2], [3, 3]],\n      [[3, 3], [2, 3]],\n      [[2, 3], [1, 2]],\n      [[1, 2], [2, 2]],\n      [[2, 2], [3, 2]]\n    ],\n    7: [\n      [[1, 1], [2, 1]],\n      [[2, 1], [2, 2]],\n      [[2, 2], [1, 1]],\n      [[2, 2], [3, 1]],\n      [[3, 1], [3, 2]],\n      [[3, 2], [2, 2]],\n      [[2, 2], [3, 3]],\n      [[3, 3], [2, 3]],\n      [[2, 3], [2, 2]],\n      [[2, 2], [1, 2]],\n      [[1, 2], [1, 3]],\n      [[1, 3], [2, 2]]\n    ],\n    8: [\n      [[2, 1], [3, 1]],\n      [[3, 1], [2, 0]],\n      [[2, 0], [1, 1]],\n      [[1, 1], [2, 1]],\n      [[2, 1], [3, 3]],\n      [[3, 3], [3, 4]],\n      [[3, 4], [2, 1]],\n      [[2, 1], [1, 4]],\n      [[1, 4], [1, 3]],\n      [[1, 3], [2, 1]]\n    ],\n    9: [\n      [[1, 2], [2, 2]],\n      [[2, 2], [3, 2]],\n      [[2, 2], [3, 4]],\n      [[3, 4], [4, 4]],\n      [[4, 4], [3, 1]],\n      [[3, 1], [2, 1]],\n      [[2, 1], [1, 1]],\n      [[1, 1], [0, 4]],\n      [[0, 4], [1, 4]],\n      [[1, 4], [2, 2]]\n    ],\n    10: [\n      [[0, 0], [0, 4]],\n      [[0, 0], [4, 0]],\n      [[4, 0], [4, 4]],\n      [[4, 4], [0, 4]],\n      [[0, 2], [2, 2]],\n      [[2, 2], [4, 2]],\n      [[2, 2], [2, 0]],\n      [[2, 2], [2, 4]],\n      [[0, 2], [1, 3]],\n      [[1, 3], [2, 2]],\n      [[2, 2], [1, 1]],\n      [[1, 1], [2, 0]],\n      [[2, 2], [3, 1]],\n      [[3, 1], [4, 2]],\n      [[2, 2], [3, 3]],\n      [[3, 3], [2, 4]]\n    ],\n    11: [\n      [[2, 0], [3, 0]],\n      [[3, 0], [3, 1]],\n      [[3, 1], [2, 1]],\n      [[2, 1], [2, 0]],\n      [[3, 1], [4, 1]],\n      [[4, 1], [4, 2]],\n      [[4, 2], [3, 2]],\n      [[3, 2], [3, 1]],\n      [[3, 2], [2, 2]],\n      [[2, 2], [2, 1]],\n      [[2, 1], [1, 1]],\n      [[1, 1], [1, 2]],\n      [[1, 2], [2, 2]],\n      [[3, 2], [3, 3]],\n      [[3, 3], [2, 3]],\n      [[2, 3], [2, 2]],\n      [[2, 3], [1, 3]],\n      [[1, 3], [1, 2]],\n      [[1, 3], [0, 3]],\n      [[0, 3], [0, 2]],\n      [[0, 2], [1, 2]],\n      [[1, 3], [1, 4]],\n      [[1, 4], [2, 4]],\n      [[2, 4], [2, 3]]\n    ],\n    12: [\n      [[0, 0], [1, 1]],\n      [[1, 1], [0, 1]],\n      [[0, 1], [0, 0]],\n      [[1, 1], [2, 2]],\n      [[2, 2], [1, 2]],\n      [[1, 2], [1, 1]],\n      [[1, 2], [0, 2]],\n      [[0, 2], [0, 1]],\n      [[0, 1], [1, 2]],\n      [[0, 2], [0, 3]],\n      [[0, 2], [1, 3]],\n      [[1, 3], [0, 3]],\n      [[1, 2], [1, 3]],\n      [[1, 3], [2, 3]],\n      [[2, 3], [3, 3]],\n      [[3, 3], [3, 2]],\n      [[3, 2], [2, 2]],\n      [[2, 2], [1, 3]],\n      [[2, 2], [3, 3]],\n      [[0, 3], [0, 4]],\n      [[0, 4], [1, 4]],\n      [[1, 4], [0, 3]],\n      [[1, 4], [2, 3]],\n      [[1, 3], [1, 4]],\n      [[2, 3], [3, 4]],\n      [[3, 4], [3, 3]],\n      [[3, 4], [4, 3]],\n      [[4, 4], [3, 4]],\n      [[4, 4], [4, 3]],\n      [[4, 3], [3, 3]],\n      [[4, 3], [4, 2]],\n      [[4, 2], [3, 2]],\n      [[4, 2], [3, 3]],\n      [[4, 2], [4, 1]],\n      [[4, 1], [3, 1]],\n      [[3, 1], [3, 2]],\n      [[3, 2], [4, 1]],\n      [[2, 2], [3, 1]],\n      [[4, 1], [4, 0]],\n      [[3, 1], [4, 0]]\n    ]\n  }\n};\n","class Vertex {\n  constructor(options) {\n    this.x = options.x;\n    this.y = options.y;\n    this.ctx = options.ctx;\n  }\n\n  pos() {\n    return [this.x, this.y];\n  }\n\n  equalYes(vertex) {\n    return this.x === vertex.x && this.y === vertex.y;\n  }\n}\n\nmodule.exports = Vertex;\n","const Vertex = require('./vertex');\nconst Constants = require('./util/constants');\n\nclass VertexEmpty extends Vertex {\n  constructor(options) {\n    super(options);\n  }\n\n  draw() {\n    this.ctx.beginPath();\n    this.ctx.fillStyle = Constants.VERTEX_PINK;\n    this.ctx.strokeStyle = Constants.VERTEX_PINK;\n    this.ctx.lineWidth = 5;\n    this.ctx.shadowBlur = 0;\n    this.ctx.globalAlpha = 1;\n    this.ctx.arc(this.x, this.y, 15, 0, 2 * Math.PI);\n    this.ctx.stroke();\n  }\n}\n\nmodule.exports = VertexEmpty;\n","const Vertex = require('./vertex');\nconst Constants = require('./util/constants');\n\nclass VertexFull extends Vertex {\n  constructor(options) {\n    super(options);\n  }\n\n  draw() {\n    this.ctx.beginPath();\n    this.ctx.arc(this.x, this.y, 15, 0, 2 * Math.PI);\n    this.ctx.fillStyle = Constants.VERTEX_PINK;\n    this.ctx.strokeStyle = Constants.VERTEX_PINK;\n    this.ctx.lineWidth = 5;\n    this.ctx.globalAlpha = 1;\n    this.ctx.fill();\n    this.ctx.beginPath();\n\n    this.ctx.moveTo(this.x - 7, this.y - 7);\n    this.ctx.lineTo(this.x + 7, this.y + 7);\n\n    this.ctx.moveTo(this.x + 7, this.y - 7);\n    this.ctx.lineTo(this.x - 7, this.y + 7);\n    this.ctx.strokeStyle = 'white';\n    this.ctx.stroke();\n  }\n}\n\nmodule.exports = VertexFull;\n","const Vertex = require('./vertex');\n\nclass VertexTemp extends Vertex {\n  constructor(options) {\n    super(options);\n  }\n\n  draw() {\n    this.ctx.beginPath();\n    this.ctx.fillStyle = '#ee7f8a';\n    this.ctx.strokeStyle = '#ee7f8a';\n    this.ctx.lineWidth = 3;\n    this.ctx.shadowBlur = 0;\n    this.ctx.globalAlpha = 1;\n    this.ctx.arc(this.x, this.y, 8, 0, 2 * Math.PI);\n    this.ctx.stroke();\n  }\n}\n\nmodule.exports = VertexTemp;\n"],"sourceRoot":""}